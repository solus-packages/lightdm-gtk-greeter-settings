From 518fd3534e132f0b0811607a239ec1ec27ffd158 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Federico=20Dami=C3=A1n=20Schonborn?=
 <federico.d.schonborn@protonmail.com>
Date: Wed, 18 Jan 2017 15:52:21 -0300
Subject: [PATCH] Add support for stateless lightdm-gtk-greeter
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In any distribution using an stateless lightdm-gtk-greeter, the
configuration file stored in configdir doesn't exists in first place
because the greeter by default uses the files placed in datadir, so
the program doesn't allow saving changes because the file doesn't
exists and thus we don't have write permissions, so it can't be
written.

This patch adds a permission check over configdir if the file doesn't
exists and the creation of an empty file (after writing, obviously)
and the needed directory if neccessary, so this can work as expected.

Signed-off-by: Federico Dami√°n Schonborn <federico.d.schonborn@protonmail.com>
---
 lightdm_gtk_greeter_settings/Config.py | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/lightdm_gtk_greeter_settings/Config.py b/lightdm_gtk_greeter_settings/Config.py
index e21bc63..c2c5211 100644
--- a/lightdm_gtk_greeter_settings/Config.py
+++ b/lightdm_gtk_greeter_settings/Config.py
@@ -149,12 +149,19 @@ class Config:
                     else:
                         config_section[key] = values[-1][1]
 
+        # Create an empty file if it does not exists
+        if not os.path.exists(self._output_path):
+            os.makedirs(os.path.dirname(self._output_path))
         with open(self._output_path, 'w') as file:
             config_file.write(file)
 
     def is_writable(self):
+        # self._output_path does exists and we have write permissions (normal behaviour)
         if os.path.exists(self._output_path) and os.access(self._output_path, os.W_OK):
             return True
+        # self._output_path does not exits but we have write permissions in configdir (for stateless support)
+        elif os.access(os.path.dirname(os.path.dirname(self._output_path)), os.W_OK):
+            return True
         return os.access(os.path.dirname(self._output_path), os.W_OK | os.X_OK)
 
     def items(self):
-- 
2.11.0

